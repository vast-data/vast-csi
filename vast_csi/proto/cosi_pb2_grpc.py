# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import cosi_pb2 as cosi__pb2


class IdentityStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DriverGetInfo = channel.unary_unary(
                '/cosi.v1alpha1.Identity/DriverGetInfo',
                request_serializer=cosi__pb2.DriverGetInfoRequest.SerializeToString,
                response_deserializer=cosi__pb2.DriverGetInfoResponse.FromString,
                )


class IdentityServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DriverGetInfo(self, request, context):
        """This call is meant to retrieve the unique provisioner Identity.
        This identity will have to be set in BucketClaim.DriverName field in order to invoke this specific provisioner.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IdentityServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DriverGetInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.DriverGetInfo,
                    request_deserializer=cosi__pb2.DriverGetInfoRequest.FromString,
                    response_serializer=cosi__pb2.DriverGetInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cosi.v1alpha1.Identity', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Identity(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DriverGetInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cosi.v1alpha1.Identity/DriverGetInfo',
            cosi__pb2.DriverGetInfoRequest.SerializeToString,
            cosi__pb2.DriverGetInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ProvisionerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DriverCreateBucket = channel.unary_unary(
                '/cosi.v1alpha1.Provisioner/DriverCreateBucket',
                request_serializer=cosi__pb2.DriverCreateBucketRequest.SerializeToString,
                response_deserializer=cosi__pb2.DriverCreateBucketResponse.FromString,
                )
        self.DriverDeleteBucket = channel.unary_unary(
                '/cosi.v1alpha1.Provisioner/DriverDeleteBucket',
                request_serializer=cosi__pb2.DriverDeleteBucketRequest.SerializeToString,
                response_deserializer=cosi__pb2.DriverDeleteBucketResponse.FromString,
                )
        self.DriverGrantBucketAccess = channel.unary_unary(
                '/cosi.v1alpha1.Provisioner/DriverGrantBucketAccess',
                request_serializer=cosi__pb2.DriverGrantBucketAccessRequest.SerializeToString,
                response_deserializer=cosi__pb2.DriverGrantBucketAccessResponse.FromString,
                )
        self.DriverRevokeBucketAccess = channel.unary_unary(
                '/cosi.v1alpha1.Provisioner/DriverRevokeBucketAccess',
                request_serializer=cosi__pb2.DriverRevokeBucketAccessRequest.SerializeToString,
                response_deserializer=cosi__pb2.DriverRevokeBucketAccessResponse.FromString,
                )


class ProvisionerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DriverCreateBucket(self, request, context):
        """This call is made to create the bucket in the backend.
        This call is idempotent
        1. If a bucket that matches both name and parameters already exists, then OK (success) must be returned.
        2. If a bucket by same name, but different parameters is provided, then the appropriate error code ALREADY_EXISTS must be returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DriverDeleteBucket(self, request, context):
        """This call is made to delete the bucket in the backend.
        If the bucket has already been deleted, then no error should be returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DriverGrantBucketAccess(self, request, context):
        """This call grants access to an account. The account_name in the request shall be used as a unique identifier to create credentials.
        The account_id returned in the response will be used as the unique identifier for deleting this access when calling DriverRevokeBucketAccess.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DriverRevokeBucketAccess(self, request, context):
        """This call revokes all access to a particular bucket from a principal.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProvisionerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DriverCreateBucket': grpc.unary_unary_rpc_method_handler(
                    servicer.DriverCreateBucket,
                    request_deserializer=cosi__pb2.DriverCreateBucketRequest.FromString,
                    response_serializer=cosi__pb2.DriverCreateBucketResponse.SerializeToString,
            ),
            'DriverDeleteBucket': grpc.unary_unary_rpc_method_handler(
                    servicer.DriverDeleteBucket,
                    request_deserializer=cosi__pb2.DriverDeleteBucketRequest.FromString,
                    response_serializer=cosi__pb2.DriverDeleteBucketResponse.SerializeToString,
            ),
            'DriverGrantBucketAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.DriverGrantBucketAccess,
                    request_deserializer=cosi__pb2.DriverGrantBucketAccessRequest.FromString,
                    response_serializer=cosi__pb2.DriverGrantBucketAccessResponse.SerializeToString,
            ),
            'DriverRevokeBucketAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.DriverRevokeBucketAccess,
                    request_deserializer=cosi__pb2.DriverRevokeBucketAccessRequest.FromString,
                    response_serializer=cosi__pb2.DriverRevokeBucketAccessResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cosi.v1alpha1.Provisioner', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Provisioner(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DriverCreateBucket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cosi.v1alpha1.Provisioner/DriverCreateBucket',
            cosi__pb2.DriverCreateBucketRequest.SerializeToString,
            cosi__pb2.DriverCreateBucketResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DriverDeleteBucket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cosi.v1alpha1.Provisioner/DriverDeleteBucket',
            cosi__pb2.DriverDeleteBucketRequest.SerializeToString,
            cosi__pb2.DriverDeleteBucketResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DriverGrantBucketAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cosi.v1alpha1.Provisioner/DriverGrantBucketAccess',
            cosi__pb2.DriverGrantBucketAccessRequest.SerializeToString,
            cosi__pb2.DriverGrantBucketAccessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DriverRevokeBucketAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cosi.v1alpha1.Provisioner/DriverRevokeBucketAccess',
            cosi__pb2.DriverRevokeBucketAccessRequest.SerializeToString,
            cosi__pb2.DriverRevokeBucketAccessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
